AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Local Development Template for Nais Auth Handler'

Globals:
  Function:
    Timeout: 60
    MemorySize: 1024
    Runtime: java11

Resources:
  AuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: target/amplify-auth-lambda.jar
      Handler: com.nais.handlers.AuthHandler::handleRequest
      Environment:
        Variables:
          # Flexible Authentication Configuration
          AUTH_MODE: MOCK  # Override auto-detection for local dev
          STAGE: dev
          AUTH_LIBRARY_VERSION: 2.1.0
          AUTH_ARCHITECTURE: amplify-like
          
          # Frontend Configuration
          FRONTEND_URL: http://localhost:5173
          LOCAL_FRONTEND_URL: http://localhost:5173
          
          # Development/Testing Configuration
          LOCAL_DEV_EMAIL: dev@example.com
          DEFAULT_TEST_EMAIL: test@example.com
          MOCK_USER_EMAIL: mock@example.com
          
          # Workspace Configuration (minimal for local dev)
          WORKSPACE_AUTH_ENABLED: false
          ALLOWED_EMAIL_DOMAINS: example.com,localhost
          
          # Prevent AWS SDK calls in local mode
          AWS_ACCESS_KEY_ID: dummy
          AWS_SECRET_ACCESS_KEY: dummy
          AWS_DEFAULT_REGION: us-east-1
          
          # Optional: OAuth config for testing OAUTH/HYBRID modes
          # Uncomment these to test with real OAuth:
          # SECRET_NAME: your-local-secret-name
          # CLIENT_ID: your-test-client-id
          # GOOGLE_CLIENT_ID: your-test-google-client-id
          # COGNITO_DOMAIN_URL: your-test-cognito-domain
      Events:
        # Health check
        HealthCheck:
          Type: Api
          Properties:
            Path: /auth/health
            Method: get
            Cors:
              AllowMethods: "'GET,POST,OPTIONS'"
              AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              AllowOrigin: "'*'"
        HealthCheckOptions:
          Type: Api
          Properties:
            Path: /auth/health
            Method: options
        
        # Google OAuth login
        GoogleLogin:
          Type: Api
          Properties:
            Path: /auth/google/login
            Method: get
            Cors:
              AllowMethods: "'GET,POST,OPTIONS'"
              AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              AllowOrigin: "'*'"
        GoogleLoginOptions:
          Type: Api
          Properties:
            Path: /auth/google/login
            Method: options
        
        # Google OAuth callback
        GoogleCallback:
          Type: Api
          Properties:
            Path: /auth/google/callback
            Method: get
            Cors:
              AllowMethods: "'GET,POST,OPTIONS'"
              AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              AllowOrigin: "'*'"
        GoogleCallbackOptions:
          Type: Api
          Properties:
            Path: /auth/google/callback
            Method: options
        
        # Token refresh
        TokenRefresh:
          Type: Api
          Properties:
            Path: /auth/token/refresh
            Method: post
        TokenRefreshOptions:
          Type: Api
          Properties:
            Path: /auth/token/refresh
            Method: options
        
        # Logout
        Logout:
          Type: Api
          Properties:
            Path: /auth/logout
            Method: post
        LogoutOptions:
          Type: Api
          Properties:
            Path: /auth/logout
            Method: options
        
        # Workspace domains
        WorkspaceDomains:
          Type: Api
          Properties:
            Path: /auth/workspace/domains
            Method: get
        WorkspaceDomainsOptions:
          Type: Api
          Properties:
            Path: /auth/workspace/domains
            Method: options

  # Customer Master API Function
  CustomerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: target/amplify-auth-lambda.jar
      Handler: com.nais.handlers.CustomerHandler::handleRequest
      Environment:
        Variables:
          # Database Configuration
          DB_URL: jdbc:postgresql://host.docker.internal:5432/gleamorb_db
          DB_USER: postgres
          DB_PASSWORD: password
          
          # Authentication Configuration
          AUTH_MODE: MOCK
          
          # App Configuration
          STAGE: dev
      Events:
        # Get all customers
        GetAllCustomers:
          Type: Api
          Properties:
            Path: /customer
            Method: get
            Cors:
              AllowMethods: "'GET,POST,OPTIONS'"
              AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              AllowOrigin: "'*'"
        GetAllCustomersOptions:
          Type: Api
          Properties:
            Path: /customer
            Method: options
        
        # Get customer by code
        GetCustomerByCode:
          Type: Api
          Properties:
            Path: /customer/{code}
            Method: get
            Cors:
              AllowMethods: "'GET,POST,OPTIONS'"
              AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              AllowOrigin: "'*'"
        GetCustomerByCodeOptions:
          Type: Api
          Properties:
            Path: /customer/{code}
            Method: options

  # Mail To Child Master API Function
  MailToChildFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: target/amplify-auth-lambda.jar
      Handler: com.nais.handlers.MailToChildHandler::handleRequest
      Environment:
        Variables:
          # Database Configuration
          DB_URL: jdbc:postgresql://host.docker.internal:5432/gleamorb_db
          DB_USER: postgres
          DB_PASSWORD: password
          
          # Authentication Configuration
          AUTH_MODE: MOCK
          
          # App Configuration
          STAGE: dev
      Events:
        # Get all mail to child records
        GetAllMailToChild:
          Type: Api
          Properties:
            Path: /mail-to-child
            Method: get
            Cors:
              AllowMethods: "'GET,POST,OPTIONS'"
              AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              AllowOrigin: "'*'"
        GetAllMailToChildOptions:
          Type: Api
          Properties:
            Path: /mail-to-child
            Method: options
        
        # Get mail to child by mailing list ID
        GetMailToChildByListId:
          Type: Api
          Properties:
            Path: /mail-to-child/{mailing_list_id}
            Method: get
            Cors:
              AllowMethods: "'GET,POST,OPTIONS'"
              AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              AllowOrigin: "'*'"
        GetMailToChildByListIdOptions:
          Type: Api
          Properties:
            Path: /mail-to-child/{mailing_list_id}
            Method: options

  # Mail API Config Master API Function
  MailApiConfigFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: target/amplify-auth-lambda.jar
      Handler: com.nais.handlers.MailApiConfigHandler::handleRequest
      Environment:
        Variables:
          # Database Configuration
          DB_URL: jdbc:postgresql://host.docker.internal:5432/gleamorb_db
          DB_USER: postgres
          DB_PASSWORD: password
          
          # Authentication Configuration
          AUTH_MODE: MOCK
          
          # App Configuration
          STAGE: dev
      Events:
        # Get all mail API config records
        GetAllMailApiConfig:
          Type: Api
          Properties:
            Path: /mail-api-config
            Method: get
            Cors:
              AllowMethods: "'GET,POST,OPTIONS'"
              AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              AllowOrigin: "'*'"
        GetAllMailApiConfigOptions:
          Type: Api
          Properties:
            Path: /mail-api-config
            Method: options
        
        # Get mail API config by job ID
        GetMailApiConfigByJobId:
          Type: Api
          Properties:
            Path: /mail-api-config/{job_id}
            Method: get
            Cors:
              AllowMethods: "'GET,POST,OPTIONS'"
              AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              AllowOrigin: "'*'"
        GetMailApiConfigByJobIdOptions:
          Type: Api
          Properties:
            Path: /mail-api-config/{job_id}
            Method: options

Outputs:
  ApiUrl:
    Description: "API Gateway endpoint URL for local development"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"